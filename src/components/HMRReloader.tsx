/**
 * üîÑ Componente para Auto-Reload em casos extremos
 * Detecta desconex√µes e tenta reconectar automaticamente
 */

import { useEffect, useState } from 'react';

export const HMRReloader = () => {
  const [isReconnecting, setIsReconnecting] = useState(false);
  const [retryCount, setRetryCount] = useState(0);

  useEffect(() => {
    // Apenas em desenvolvimento
    if (import.meta.env.MODE !== 'development') return;

    let lastHeartbeat = Date.now();
    let isConnected = true;
    let checkInterval: NodeJS.Timeout | null = null;

    const checkConnection = () => {
      const timeSinceLastHeartbeat = Date.now() - lastHeartbeat;
      
      // Se n√£o houve heartbeat h√° mais de 10 segundos, considerar desconectado
      if (timeSinceLastHeartbeat > 10000 && isConnected) {
        console.warn('‚ö†Ô∏è Conex√£o HMR perdida detectada');
        isConnected = false;
        setIsReconnecting(true);
        
        // Tentar reconectar se ainda n√£o tentou muitas vezes
        if (retryCount < 3) {
          setRetryCount(prev => prev + 1);
          // For√ßar reload da p√°gina ap√≥s 2 segundos se n√£o reconectar
          setTimeout(() => {
            if (!isConnected) {
              console.log('üîÑ Tentando reconectar...');
              window.location.reload();
            }
          }, 2000);
        }
      }
    };

    // Monitorar eventos do Vite HMR
    if (import.meta.hot) {
      // Detectar conex√£o/desconex√£o do WebSocket
      import.meta.hot.on('vite:ws:connect', () => {
        console.log('‚úÖ HMR conectado');
        isConnected = true;
        lastHeartbeat = Date.now();
        setIsReconnecting(false);
        setRetryCount(0);
      });

      import.meta.hot.on('vite:ws:disconnect', () => {
        console.warn('‚ö†Ô∏è HMR desconectado');
        isConnected = false;
        setIsReconnecting(true);
      });

      // Atualiza√ß√£o bem-sucedida
      import.meta.hot.on('vite:beforeUpdate', () => {
        lastHeartbeat = Date.now();
        isConnected = true;
      });

      // Erro no HMR
      import.meta.hot.on('vite:error', (err) => {
        console.error('‚ùå Erro no HMR:', err);
      });

      // Aceitar todas as atualiza√ß√µes
      import.meta.hot.accept(() => {
        lastHeartbeat = Date.now();
      });
    }

    // Verificar conex√£o a cada 5 segundos
    checkInterval = setInterval(checkConnection, 5000);

    return () => {
      if (checkInterval) clearInterval(checkInterval);
    };
  }, [retryCount]);

  // Completamente invis√≠vel - n√£o renderiza nada
  return null;
};

