/**
 * üîÑ Componente para Auto-Reload APENAS em casos extremos
 * 
 * DESABILITADO para evitar perda de dados
 * Apenas registra eventos do HMR sem fazer reload autom√°tico
 */

import { useEffect, useState } from 'react';

export const HMRReloader = () => {
  const [isReconnecting, setIsReconnecting] = useState(false);

  useEffect(() => {
    // Apenas em desenvolvimento
    if (import.meta.env.MODE !== 'development') return;

    let lastHeartbeat = Date.now();
    let isConnected = true;

    // Fun√ß√£o de reload DESABILITADA para evitar perda de dados
    const silentReload = () => {
      // N√ÉO FAZ NADA - reload manual pelo usu√°rio √© melhor
      // Evita perder dados de formul√°rios
      return;
    };

    // Monitorar eventos do Vite HMR
    if (import.meta.hot) {
      // Detectar conex√£o/desconex√£o do WebSocket
      import.meta.hot.on('vite:ws:connect', () => {
        isConnected = true;
        lastHeartbeat = Date.now();
        setIsReconnecting(false);
      });

      import.meta.hot.on('vite:ws:disconnect', () => {
        isConnected = false;
        setIsReconnecting(true);
        // N√ÉO faz reload autom√°tico - usu√°rio deve pressionar F5 manualmente
      });

      // Atualiza√ß√£o bem-sucedida
      import.meta.hot.on('vite:beforeUpdate', () => {
        lastHeartbeat = Date.now();
        isConnected = true;
      });

      // Erro no HMR - N√ÉO recarregar automaticamente
      import.meta.hot.on('vite:error', () => {
        // Apenas registra, n√£o recarrega
      });

      // Aceitar todas as atualiza√ß√µes
      import.meta.hot.accept(() => {
        lastHeartbeat = Date.now();
      });
    }

    // Heartbeat desabilitado - n√£o fazer verifica√ß√µes
    return () => {
      // Cleanup
    };
  }, []);

  // Completamente invis√≠vel - n√£o renderiza nada
  return null;
};

