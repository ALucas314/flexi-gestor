// üîî Rotas de Notifica√ß√µes
// Este arquivo cont√©m todas as rotas relacionadas √†s notifica√ß√µes

import express, { Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { authenticateToken, AuthRequest } from '../middleware/auth';

const router = express.Router();
const prisma = new PrismaClient();

// üîê Todas as rotas requerem autentica√ß√£o
router.use(authenticateToken);

// üìã Listar todas as notifica√ß√µes do usu√°rio
router.get('/', async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.userId!;

    const notifications = await prisma.notification.findMany({
      where: { userId },
      orderBy: { timestamp: 'desc' }
    });

    console.log(`üîî Listando ${notifications.length} notifica√ß√µes para usu√°rio:`, userId);

    res.json({ notifications });
  } catch (error: any) {
    console.error('‚ùå Erro ao listar notifica√ß√µes:', error);
    res.status(500).json({ 
      error: 'Erro ao buscar notifica√ß√µes',
      message: error.message 
    });
  }
});

// ‚ûï Criar nova notifica√ß√£o
router.post('/', async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.userId!;
    const { title, message, type } = req.body;

    console.log('‚ûï Criando notifica√ß√£o:', { title, type });

    // Validar dados obrigat√≥rios
    if (!title || !message || !type) {
      return res.status(400).json({ 
        error: 'Dados incompletos',
        message: 'T√≠tulo, mensagem e tipo s√£o obrigat√≥rios'
      });
    }

    // Validar tipo
    const validTypes = ['success', 'error', 'warning', 'info'];
    if (!validTypes.includes(type)) {
      return res.status(400).json({ 
        error: 'Tipo inv√°lido',
        message: 'O tipo deve ser: success, error, warning ou info'
      });
    }

    // Criar notifica√ß√£o
    const notification = await prisma.notification.create({
      data: {
        title,
        message,
        type,
        userId
      }
    });

    console.log('‚úÖ Notifica√ß√£o criada:', notification.id);

    res.status(201).json({
      message: 'Notifica√ß√£o criada com sucesso',
      notification
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
    res.status(500).json({ 
      error: 'Erro ao criar notifica√ß√£o',
      message: error.message 
    });
  }
});

// ‚úÖ Marcar notifica√ß√£o como lida
router.patch('/:id/read', async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const userId = req.userId!;

    console.log('‚úÖ Marcando notifica√ß√£o como lida:', id);

    // Verificar se notifica√ß√£o existe e pertence ao usu√°rio
    const existingNotification = await prisma.notification.findFirst({
      where: { id, userId }
    });

    if (!existingNotification) {
      return res.status(404).json({ 
        error: 'Notifica√ß√£o n√£o encontrada'
      });
    }

    // Atualizar notifica√ß√£o
    const notification = await prisma.notification.update({
      where: { id },
      data: { read: true }
    });

    console.log('‚úÖ Notifica√ß√£o marcada como lida:', notification.id);

    res.json({
      message: 'Notifica√ß√£o marcada como lida',
      notification
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao marcar notifica√ß√£o:', error);
    res.status(500).json({ 
      error: 'Erro ao marcar notifica√ß√£o',
      message: error.message 
    });
  }
});

// üóëÔ∏è Deletar TODAS as notifica√ß√µes (lidas e n√£o lidas) - DEVE VIR ANTES DE /:id
router.delete('/all', async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.userId!;

    console.log('üóëÔ∏è Deletando TODAS as notifica√ß√µes para usu√°rio:', userId);

    const result = await prisma.notification.deleteMany({
      where: { 
        userId
      }
    });

    console.log(`‚úÖ ${result.count} notifica√ß√µes deletadas`);

    res.json({
      message: `${result.count} notifica√ß√µes foram removidas`,
      count: result.count
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao deletar todas as notifica√ß√µes:', error);
    res.status(500).json({ 
      error: 'Erro ao deletar notifica√ß√µes',
      message: error.message 
    });
  }
});

// üßπ Limpar todas as notifica√ß√µes lidas
router.delete('/read/all', async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.userId!;

    console.log('üßπ Limpando todas as notifica√ß√µes lidas para usu√°rio:', userId);

    const result = await prisma.notification.deleteMany({
      where: { 
        userId,
        read: true
      }
    });

    console.log(`‚úÖ ${result.count} notifica√ß√µes lidas deletadas`);

    res.json({
      message: `${result.count} notifica√ß√µes lidas foram removidas`,
      count: result.count
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao limpar notifica√ß√µes:', error);
    res.status(500).json({ 
      error: 'Erro ao limpar notifica√ß√µes',
      message: error.message 
    });
  }
});

// üóëÔ∏è Deletar notifica√ß√£o individual
router.delete('/:id', async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const userId = req.userId!;

    console.log('üóëÔ∏è Deletando notifica√ß√£o:', id);

    // Verificar se notifica√ß√£o existe e pertence ao usu√°rio
    const existingNotification = await prisma.notification.findFirst({
      where: { id, userId }
    });

    if (!existingNotification) {
      return res.status(404).json({ 
        error: 'Notifica√ß√£o n√£o encontrada'
      });
    }

    // Deletar notifica√ß√£o
    await prisma.notification.delete({
      where: { id }
    });

    console.log('‚úÖ Notifica√ß√£o deletada:', id);

    res.json({
      message: 'Notifica√ß√£o deletada com sucesso'
    });
  } catch (error: any) {
    console.error('‚ùå Erro ao deletar notifica√ß√£o:', error);
    res.status(500).json({ 
      error: 'Erro ao deletar notifica√ß√£o',
      message: error.message 
    });
  }
});

export default router;

